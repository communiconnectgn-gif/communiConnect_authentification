const fs = require('fs');
const path = require('path');

console.log('üîç DIAGNOSTIC BOUTON D√âTAILS √âV√âNEMENTS');
console.log('==========================================');

// V√©rifier les fichiers cl√©s
const filesToCheck = [
  'client/src/pages/Events/EventsPage.js',
  'client/src/components/Events/EventDetails.js',
  'client/src/components/Events/EventCard.js'
];

console.log('\nüìÅ V√©rification des fichiers:');
filesToCheck.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// Analyser EventsPage.js
const eventsPagePath = 'client/src/pages/Events/EventsPage.js';
if (fs.existsSync(eventsPagePath)) {
  const content = fs.readFileSync(eventsPagePath, 'utf8');
  
  console.log('\nüîç Analyse de EventsPage.js:');
  
  // V√©rifier la fonction handleViewDetails
  const hasHandleViewDetails = content.includes('handleViewDetails');
  console.log(`   ${hasHandleViewDetails ? '‚úÖ' : '‚ùå'} Fonction handleViewDetails`);
  
  // V√©rifier le bouton D√©tails
  const hasDetailsButton = content.includes('D√©tails') && content.includes('handleViewDetails');
  console.log(`   ${hasDetailsButton ? '‚úÖ' : '‚ùå'} Bouton D√©tails avec handleViewDetails`);
  
  // V√©rifier le dialog de d√©tails
  const hasDetailsDialog = content.includes('showDetailsDialog') && content.includes('EventDetails');
  console.log(`   ${hasDetailsDialog ? '‚úÖ' : '‚ùå'} Dialog de d√©tails avec EventDetails`);
  
  // V√©rifier les imports n√©cessaires
  const hasEventDetailsImport = content.includes('EventDetails');
  console.log(`   ${hasDetailsDialog ? '‚úÖ' : '‚ùå'} Import EventDetails`);
  
  // V√©rifier les √©tats
  const hasSelectedEventState = content.includes('selectedEvent') && content.includes('useState');
  console.log(`   ${hasSelectedEventState ? '‚úÖ' : '‚ùå'} √âtat selectedEvent`);
  
  const hasShowDetailsDialogState = content.includes('showDetailsDialog') && content.includes('useState');
  console.log(`   ${hasShowDetailsDialogState ? '‚úÖ' : '‚ùå'} √âtat showDetailsDialog`);
}

// Analyser EventDetails.js
const eventDetailsPath = 'client/src/components/Events/EventDetails.js';
if (fs.existsSync(eventDetailsPath)) {
  const content = fs.readFileSync(eventDetailsPath, 'utf8');
  
  console.log('\nüîç Analyse de EventDetails.js:');
  
  // V√©rifier l'export du composant
  const hasExport = content.includes('export default EventDetails');
  console.log(`   ${hasExport ? '‚úÖ' : '‚ùå'} Export EventDetails`);
  
  // V√©rifier les props
  const hasEventProp = content.includes('event') && content.includes('props');
  console.log(`   ${hasEventProp ? '‚úÖ' : '‚ùå'} Prop event`);
  
  // V√©rifier le rendu conditionnel
  const hasConditionalRender = content.includes('if (!event) return null');
  console.log(`   ${hasConditionalRender ? '‚úÖ' : '‚ùå'} Rendu conditionnel`);
  
  // V√©rifier les imports Material-UI
  const hasMuiImports = content.includes('@mui/material') && content.includes('@mui/icons-material');
  console.log(`   ${hasMuiImports ? '‚úÖ' : '‚ùå'} Imports Material-UI`);
}

// Cr√©er un test simple pour v√©rifier le bouton
const createTestComponent = () => {
  const testComponent = `import React, { useState } from 'react';
import { Button, Dialog, DialogTitle, DialogContent, DialogActions, Typography } from '@mui/material';

const TestEventDetails = () => {
  const [open, setOpen] = useState(false);
  const [testEvent] = useState({
    _id: 'test-123',
    title: '√âv√©nement de test',
    description: 'Description de test',
    startDate: new Date().toISOString(),
    location: { venue: 'Lieu de test', quartier: 'Quartier de test' },
    type: 'meeting',
    status: 'published',
    organizer: { _id: 'user-123', name: 'Organisateur Test' },
    participants: []
  });

  const handleViewDetails = (event) => {
    console.log('Bouton D√©tails cliqu√©:', event);
    setOpen(true);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Test Bouton D√©tails √âv√©nements</h2>
      
      <Button
        variant="contained"
        color="primary"
        onClick={() => handleViewDetails(testEvent)}
        style={{ marginBottom: '20px' }}
      >
        Test D√©tails
      </Button>

      <Dialog open={open} onClose={() => setOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>D√©tails de l'√©v√©nement de test</DialogTitle>
        <DialogContent>
          <Typography variant="h6">{testEvent.title}</Typography>
          <Typography variant="body1">{testEvent.description}</Typography>
          <Typography variant="body2" color="text.secondary">
            Lieu: {testEvent.location.venue}, {testEvent.location.quartier}
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpen(false)}>Fermer</Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default TestEventDetails;
`;

  fs.writeFileSync('client/src/components/Events/TestEventDetails.js', testComponent);
  console.log('\n‚úÖ Composant de test TestEventDetails cr√©√©');
};

// V√©rifier les erreurs potentielles
const checkForErrors = () => {
  console.log('\nüîç V√©rification des erreurs potentielles:');
  
  // V√©rifier si EventDetails est bien import√© dans EventsPage
  const eventsPagePath = 'client/src/pages/Events/EventsPage.js';
  if (fs.existsSync(eventsPagePath)) {
    const content = fs.readFileSync(eventsPagePath, 'utf8');
    
    // V√©rifier l'import d'EventDetails
    const hasEventDetailsImport = content.includes('import EventDetails') || 
                                 content.includes('from \'../components/Events/EventDetails\'');
    console.log(`   ${hasEventDetailsImport ? '‚úÖ' : '‚ùå'} Import EventDetails dans EventsPage`);
    
    // V√©rifier l'utilisation d'EventDetails dans le JSX
    const hasEventDetailsUsage = content.includes('<EventDetails') && content.includes('event={selectedEvent}');
    console.log(`   ${hasEventDetailsUsage ? '‚úÖ' : '‚ùå'} Utilisation EventDetails dans JSX`);
    
    // V√©rifier la gestion des √©tats
    const hasStateManagement = content.includes('useState') && 
                              content.includes('selectedEvent') && 
                              content.includes('showDetailsDialog');
    console.log(`   ${hasStateManagement ? '‚úÖ' : '‚ùå'} Gestion des √©tats pour le dialog`);
  }
  
  // V√©rifier EventDetails.js
  const eventDetailsPath = 'client/src/components/Events/EventDetails.js';
  if (fs.existsSync(eventDetailsPath)) {
    const content = fs.readFileSync(eventDetailsPath, 'utf8');
    
    // V√©rifier la structure du composant
    const hasComponentStructure = content.includes('const EventDetails') && 
                                 content.includes('return (') &&
                                 content.includes('export default');
    console.log(`   ${hasComponentStructure ? '‚úÖ' : '‚ùå'} Structure du composant EventDetails`);
    
    // V√©rifier les props
    const hasProps = content.includes('event') && content.includes('props');
    console.log(`   ${hasProps ? '‚úÖ' : '‚ùå'} Props du composant EventDetails`);
  }
};

// Ex√©cution du diagnostic
console.log('\nüîß Application du diagnostic...');

checkForErrors();
createTestComponent();

console.log('\nüéØ DIAGNOSTIC TERMIN√â');
console.log('========================');
console.log('‚úÖ Analyse des fichiers termin√©e');
console.log('‚úÖ Composant de test cr√©√©');
console.log('\nüí° Prochaines √©tapes:');
console.log('1. V√©rifiez la console du navigateur pour les erreurs JavaScript');
console.log('2. Testez le composant TestEventDetails');
console.log('3. V√©rifiez que EventDetails est bien import√© dans EventsPage');
console.log('4. V√©rifiez que les √©tats selectedEvent et showDetailsDialog sont bien d√©finis'); 