const fs = require('fs');
const path = require('path');
const { generateDemoAvatars } = require('../utils/generateAvatars');

console.log('üöÄ Configuration CommuniConnect - Mode D√©veloppement');
console.log('==================================================');

// 1. V√©rifier et cr√©er le fichier .env
function setupEnvironment() {
  console.log('\nüìù Configuration des variables d\'environnement...');
  
  const envPath = path.join(__dirname, '../.env');
  const envExamplePath = path.join(__dirname, '../env.example');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ö†Ô∏è  Fichier .env manquant, cr√©ation en cours...');
    
    if (fs.existsSync(envExamplePath)) {
      const envContent = fs.readFileSync(envExamplePath, 'utf8');
      
      // Modifier le JWT_SECRET pour corriger l'erreur
      const modifiedContent = envContent.replace(
        'JWT_SECRET=your-super-secret-jwt-key-change-this-in-production',
        'JWT_SECRET=communiconnect-super-secret-jwt-key-2024-production-ready'
      );
      
      fs.writeFileSync(envPath, modifiedContent);
      console.log('‚úÖ Fichier .env cr√©√© avec JWT_SECRET corrig√©');
    } else {
      console.log('‚ùå Fichier env.example manquant');
      return false;
    }
  } else {
    console.log('‚úÖ Fichier .env existe d√©j√†');
  }
  
  return true;
}

// 2. Cr√©er les dossiers n√©cessaires
function createDirectories() {
  console.log('\nüìÅ Cr√©ation des dossiers n√©cessaires...');
  
  const directories = [
    '../static/avatars',
    '../static/uploads',
    '../static/images',
    '../logs'
  ];
  
  directories.forEach(dir => {
    const dirPath = path.join(__dirname, dir);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ Dossier cr√©√©: ${dir}`);
    } else {
      console.log(`‚úÖ Dossier existe: ${dir}`);
    }
  });
}

// 3. G√©n√©rer les avatars de d√©monstration
function generateAvatars() {
  console.log('\nüé® G√©n√©ration des avatars de d√©monstration...');
  
  try {
    generateDemoAvatars();
    console.log('‚úÖ Avatars de d√©monstration g√©n√©r√©s avec succ√®s');
  } catch (error) {
    console.log('‚ùå Erreur lors de la g√©n√©ration des avatars:', error.message);
  }
}

// 4. V√©rifier la configuration de la base de donn√©es
function checkDatabaseConfig() {
  console.log('\nüóÑÔ∏è  V√©rification de la configuration de la base de donn√©es...');
  
  const envPath = path.join(__dirname, '../.env');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    
    if (envContent.includes('MONGODB_URI=mongodb://localhost:27017/communiconnect')) {
      console.log('‚úÖ Configuration MongoDB locale d√©tect√©e');
      console.log('‚ÑπÔ∏è  En mode d√©veloppement, l\'application fonctionne sans base de donn√©es');
    } else {
      console.log('‚ö†Ô∏è  Configuration MongoDB personnalis√©e d√©tect√©e');
    }
  }
}

// 5. V√©rifier les d√©pendances
function checkDependencies() {
  console.log('\nüì¶ V√©rification des d√©pendances...');
  
  const packagePath = path.join(__dirname, '../package.json');
  if (fs.existsSync(packagePath)) {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    const requiredDeps = ['express', 'mongoose', 'jsonwebtoken', 'bcryptjs', 'cors'];
    const missingDeps = requiredDeps.filter(dep => !packageJson.dependencies[dep]);
    
    if (missingDeps.length === 0) {
      console.log('‚úÖ Toutes les d√©pendances requises sont install√©es');
    } else {
      console.log('‚ö†Ô∏è  D√©pendances manquantes:', missingDeps.join(', '));
      console.log('üí° Ex√©cutez: npm install');
    }
  }
}

// 6. Cr√©er un fichier de test pour v√©rifier la configuration
function createTestFile() {
  console.log('\nüß™ Cr√©ation d\'un fichier de test de configuration...');
  
  const testContent = `// Test de configuration CommuniConnect
const testConfig = {
  jwtSecret: process.env.JWT_SECRET || 'default-secret',
  port: process.env.PORT || 5000,
  nodeEnv: process.env.NODE_ENV || 'development',
  corsOrigin: process.env.CORS_ORIGIN || 'http://localhost:3000'
};

console.log('‚úÖ Configuration de test charg√©e');
module.exports = testConfig;
`;

  const testPath = path.join(__dirname, '../utils/testConfig.js');
  fs.writeFileSync(testPath, testContent);
  console.log('‚úÖ Fichier de test de configuration cr√©√©');
}

// Fonction principale
function setupDevelopment() {
  console.log('üöÄ D√©marrage de la configuration CommuniConnect...\n');
  
  // 1. Configuration environnement
  if (!setupEnvironment()) {
    console.log('‚ùå √âchec de la configuration de l\'environnement');
    return;
  }
  
  // 2. Cr√©er les dossiers
  createDirectories();
  
  // 3. G√©n√©rer les avatars
  generateAvatars();
  
  // 4. V√©rifier la base de donn√©es
  checkDatabaseConfig();
  
  // 5. V√©rifier les d√©pendances
  checkDependencies();
  
  // 6. Cr√©er le fichier de test
  createTestFile();
  
  console.log('\nüéâ Configuration termin√©e avec succ√®s !');
  console.log('\nüìã Prochaines √©tapes:');
  console.log('1. Red√©marrer le serveur: npm run dev');
  console.log('2. Tester l\'authentification: http://localhost:3000/login');
  console.log('3. V√©rifier les avatars: http://localhost:5000/api/static/avatars/');
  console.log('4. Tester la navigation: http://localhost:3000/');
  
  console.log('\nüîß Probl√®mes corrig√©s:');
  console.log('‚úÖ Erreur JWT - JWT_SECRET configur√©');
  console.log('‚úÖ Images manquantes - Avatars de d√©monstration cr√©√©s');
  console.log('‚úÖ Configuration environnement - Fichier .env cr√©√©');
  console.log('‚úÖ Dossiers n√©cessaires - Structure cr√©√©e');
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  setupDevelopment();
}

module.exports = {
  setupDevelopment,
  setupEnvironment,
  createDirectories,
  generateAvatars,
  checkDatabaseConfig,
  checkDependencies
}; 