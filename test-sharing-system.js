const puppeteer = require('puppeteer');

async function testSharingSystem() {
  let browser;
  
  try {
    console.log('üß™ Test du syst√®me de partage am√©lior√©...');
    
    browser = await puppeteer.launch({
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    });
    
    const page = await browser.newPage();
    
    // Aller √† la page d'accueil
    console.log('üì± Navigation vers la page d\'accueil...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle0' });
    await page.waitForTimeout(3000);
    
    // V√©rifier s'il y a des posts
    console.log('üîç V√©rification des posts...');
    const posts = await page.$$('.MuiCard-root');
    
    if (posts.length === 0) {
      console.log('‚ùå Aucun post trouv√©');
      return;
    }
    
    console.log(`‚úÖ ${posts.length} posts trouv√©s`);
    
    // Cliquer sur le bouton partager du premier post
    console.log('üì§ Test du bouton partager...');
    const shareButtons = await page.$$('button:has-text("Partager")');
    
    if (shareButtons.length === 0) {
      console.log('‚ùå Bouton partager non trouv√©');
      return;
    }
    
    console.log('‚úÖ Bouton partager trouv√©');
    await shareButtons[0].click();
    await page.waitForTimeout(2000);
    
    // V√©rifier que le dialogue de partage s'ouvre
    console.log('üîç V√©rification du dialogue de partage...');
    const shareDialog = await page.$('.MuiDialog-root');
    
    if (shareDialog) {
      console.log('‚úÖ Dialogue de partage ouvert');
      
      // V√©rifier les options de partage interne
      console.log('üîç V√©rification des options de partage interne...');
      const repostButton = await page.$('button:has-text("Reposter")');
      
      if (repostButton) {
        console.log('‚úÖ Bouton reposter trouv√©');
      } else {
        console.log('‚ùå Bouton reposter non trouv√©');
      }
      
      // V√©rifier les options de partage externe
      console.log('üîç V√©rification des options de partage externe...');
      const externalOptions = await page.$$('li');
      const hasWhatsApp = await page.$('li:has-text("WhatsApp")');
      const hasFacebook = await page.$('li:has-text("Facebook")');
      const hasTwitter = await page.$('li:has-text("Twitter")');
      const hasEmail = await page.$('li:has-text("Email")');
      const hasCopyLink = await page.$('li:has-text("Copier le lien")');
      
      console.log('üì± Options de partage externe:');
      console.log(`  WhatsApp: ${hasWhatsApp ? '‚úÖ' : '‚ùå'}`);
      console.log(`  Facebook: ${hasFacebook ? '‚úÖ' : '‚ùå'}`);
      console.log(`  Twitter: ${hasTwitter ? '‚úÖ' : '‚ùå'}`);
      console.log(`  Email: ${hasEmail ? '‚úÖ' : '‚ùå'}`);
      console.log(`  Copier lien: ${hasCopyLink ? '‚úÖ' : '‚ùå'}`);
      
      // Test du repost
      console.log('üìù Test du repost...');
      if (repostButton) {
        // Remplir le champ de commentaire
        const commentField = await page.$('textarea, input[type="text"]');
        if (commentField) {
          await commentField.type('Test de repost avec commentaire');
          await page.waitForTimeout(1000);
        }
        
        // Cliquer sur reposter
        await repostButton.click();
        await page.waitForTimeout(3000);
        
        // V√©rifier si un message de succ√®s appara√Æt
        const successMessage = await page.evaluate(() => {
          const alerts = Array.from(document.querySelectorAll('.MuiAlert-root, .MuiSnackbar-root'));
          return alerts.find(alert => 
            alert.textContent.includes('succ√®s') || 
            alert.textContent.includes('repost√©')
          );
        });
        
        if (successMessage) {
          console.log('‚úÖ Repost cr√©√© avec succ√®s');
        } else {
          console.log('‚ùå Repost √©chou√©');
        }
      }
      
      // Fermer le dialogue
      const closeButton = await page.$('button:has-text("Fermer")');
      if (closeButton) {
        await closeButton.click();
        await page.waitForTimeout(1000);
      }
      
    } else {
      console.log('‚ùå Dialogue de partage non ouvert');
    }
    
    // V√©rifier s'il y a des reposts dans le flux
    console.log('üîç V√©rification des reposts dans le flux...');
    const repostElements = await page.$$('[data-testid="RepostIcon"], .MuiSvgIcon-root:has-text("Repost")');
    
    if (repostElements.length > 0) {
      console.log(`‚úÖ ${repostElements.length} reposts trouv√©s dans le flux`);
    } else {
      console.log('‚ÑπÔ∏è Aucun repost trouv√© dans le flux (normal si aucun repost n\'a √©t√© cr√©√©)');
    }
    
    // Prendre une capture d'√©cran
    await page.screenshot({ path: 'sharing-system-test.png', fullPage: true });
    console.log('üì∏ Capture d\'√©cran sauvegard√©e: sharing-system-test.png');
    
    console.log('‚úÖ Test du syst√®me de partage termin√©');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  } finally {
    if (browser) {
      await browser.close();
    }
  }
}

// Lancer le test
testSharingSystem();