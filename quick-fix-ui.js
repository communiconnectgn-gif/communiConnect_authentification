const fs = require('fs');
const path = require('path');

console.log('üîß CORRECTION RAPIDE DES PROBL√àMES UI');

// 1. Cr√©er le fichier T.jpg
const avatarsDir = path.join(__dirname, 'server/static/avatars');
const sourceFile = path.join(avatarsDir, 'U.jpg');
const targetFile = path.join(avatarsDir, 'T.jpg');

if (fs.existsSync(sourceFile) && !fs.existsSync(targetFile)) {
  fs.copyFileSync(sourceFile, targetFile);
  console.log('‚úÖ T.jpg cr√©√©');
} else {
  console.log('‚ÑπÔ∏è T.jpg existe d√©j√† ou U.jpg manquant');
}

// 2. V√©rifier les donn√©es g√©ographiques
const dataPath = path.join(__dirname, 'client/public/data/guinea-geography-complete.json');

if (fs.existsSync(dataPath)) {
  try {
    const data = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
    const regions = data.Guin√©e?.R√©gions || [];
    
    if (regions.length > 0) {
      console.log(`‚úÖ ${regions.length} r√©gions trouv√©es`);
      
      const conakry = regions.find(r => r.nom === 'Conakry');
      if (conakry) {
        console.log('‚úÖ R√©gion Conakry trouv√©e');
        const prefectures = conakry.pr√©fectures || [];
        console.log(`‚úÖ ${prefectures.length} pr√©fectures pour Conakry`);
        
        const conakryPrefecture = prefectures.find(p => p.nom === 'Conakry');
        if (conakryPrefecture) {
          console.log('‚úÖ Pr√©fecture Conakry trouv√©e');
        } else {
          console.log('‚ö†Ô∏è Pr√©fecture Conakry manquante');
        }
      } else {
        console.log('‚ö†Ô∏è R√©gion Conakry manquante');
      }
    } else {
      console.log('‚ùå Aucune r√©gion trouv√©e');
    }
  } catch (error) {
    console.error('‚ùå Erreur lecture donn√©es:', error.message);
  }
} else {
  console.log('‚ùå Fichier donn√©es g√©ographiques non trouv√©');
}

console.log('‚úÖ Corrections termin√©es'); 