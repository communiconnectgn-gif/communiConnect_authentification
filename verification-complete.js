const axios = require('axios');

console.log('üîç V√âRIFICATION COMPL√àTE DU SYST√àME');
console.log('=' .repeat(50));

async function verificationComplete() {
  const baseUrl = 'http://localhost:5000/api';
  
  try {
    console.log('\nüöÄ V√©rification du serveur...');
    
    // Test 1: Health check
    console.log('\n1Ô∏è‚É£ Test health check...');
    const healthResponse = await axios.get(`${baseUrl}/health`);
    console.log(`‚úÖ Serveur: ${healthResponse.data.status}`);
    
    // Test 2: Routes livestreams principales
    console.log('\n2Ô∏è‚É£ Test routes livestreams...');
    
    const livestreamsResponse = await axios.get(`${baseUrl}/livestreams`);
    console.log(`‚úÖ Liste livestreams: ${livestreamsResponse.data.data?.length || 0} lives`);
    
    const liveResponse = await axios.get(`${baseUrl}/livestreams/live`);
    console.log(`‚úÖ Lives en direct: ${liveResponse.data.data?.length || 0} lives`);
    
    const scheduledResponse = await axios.get(`${baseUrl}/livestreams/scheduled`);
    console.log(`‚úÖ Lives programm√©s: ${scheduledResponse.data.data?.length || 0} lives`);
    
    const alertsResponse = await axios.get(`${baseUrl}/livestreams/alerts`);
    console.log(`‚úÖ Alertes: ${alertsResponse.data.data?.length || 0} alertes`);
    
    // Test 3: Routes friends
    console.log('\n3Ô∏è‚É£ Test routes friends...');
    
    const friendsResponse = await axios.get(`${baseUrl}/friends`);
    console.log(`‚úÖ Liste amis: ${friendsResponse.data.friends?.length || 0} amis`);
    
    const requestsResponse = await axios.get(`${baseUrl}/friends/requests`);
    console.log(`‚úÖ Demandes re√ßues: ${requestsResponse.data.requests?.length || 0} demandes`);
    
    // Test 4: Routes auth
    console.log('\n4Ô∏è‚É£ Test routes auth...');
    
    const authResponse = await axios.post(`${baseUrl}/auth/login`, {
      identifier: 'test@communiconnect.gn',
      password: 'test123'
    });
    console.log(`‚úÖ Auth: ${authResponse.data.token ? 'Token re√ßu' : '√âchec'}`);
    
    // Test 5: Donn√©es de localisation dans les livestreams
    console.log('\n5Ô∏è‚É£ V√©rification des donn√©es de localisation...');
    
    if (livestreamsResponse.data.data && livestreamsResponse.data.data.length > 0) {
      const firstLive = livestreamsResponse.data.data[0];
      console.log(`üìç Premier live - Localisation:`);
      console.log(`   Pr√©fecture: ${firstLive.location?.prefecture || 'Non d√©finie'}`);
      console.log(`   Commune: ${firstLive.location?.commune || 'Non d√©finie'}`);
      console.log(`   Quartier: ${firstLive.location?.quartier || 'Non d√©fini'}`);
    }
    
    // Test 6: Filtrage par localisation
    console.log('\n6Ô∏è‚É£ Test filtrage par localisation...');
    
    const filteredResponse = await axios.get(`${baseUrl}/livestreams?prefecture=Lab√©&commune=Lab√©-Centre&quartier=Porel`);
    console.log(`‚úÖ Filtrage Lab√©: ${filteredResponse.data.data?.length || 0} lives`);
    
    // Test 7: Cr√©ation d'un nouveau livestream
    console.log('\n7Ô∏è‚É£ Test cr√©ation livestream...');
    
    const createResponse = await axios.post(`${baseUrl}/livestreams`, {
      title: 'Test Live Frontend',
      description: 'Test de cr√©ation depuis le frontend',
      location: {
        prefecture: 'Lab√©',
        commune: 'Lab√©-Centre',
        quartier: 'Porel'
      }
    });
    console.log(`‚úÖ Live cr√©√©: ${createResponse.data.data?.title || '√âchec'}`);
    
    console.log('\nüìä R√âSUM√â COMPLET:');
    console.log('‚úÖ Serveur backend: Op√©rationnel');
    console.log('‚úÖ Routes livestreams: Fonctionnelles');
    console.log('‚úÖ Routes friends: Fonctionnelles');
    console.log('‚úÖ Routes auth: Fonctionnelles');
    console.log('‚úÖ Donn√©es de localisation: Pr√©sentes');
    console.log('‚úÖ Filtrage: Fonctionnel');
    console.log('‚úÖ Cr√©ation: Fonctionnelle');
    
    console.log('\nüéØ PROCHAINES √âTAPES POUR LE FRONTEND:');
    console.log('1. Red√©marrer le frontend: cd client && npm start');
    console.log('2. V√©rifier que les composants SelectInput ont les bonnes options');
    console.log('3. Tester l\'interface utilisateur');
    console.log('4. V√©rifier les filtres de localisation');
    
    console.log('\nüí° SOLUTIONS POUR LES ERREURS MUI:');
    console.log('- Les erreurs MUI indiquent que les composants SelectInput n\'ont pas les bonnes options');
    console.log('- Il faut s\'assurer que les donn√©es de localisation sont charg√©es dans le frontend');
    console.log('- V√©rifier que les composants re√ßoivent les bonnes props');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüîß SOLUTION:');
      console.log('Le serveur backend n\'est pas d√©marr√©.');
      console.log('1. Ouvrir un nouveau terminal');
      console.log('2. cd server && npm start');
      console.log('3. Attendre que le serveur d√©marre');
      console.log('4. Relancer ce test');
    }
  }
}

verificationComplete(); 