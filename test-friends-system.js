const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// Configuration axios
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Couleurs pour les messages
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const logSuccess = (message) => log(`‚úÖ ${message}`, 'green');
const logError = (message) => log(`‚ùå ${message}`, 'red');
const logInfo = (message) => log(`‚ÑπÔ∏è  ${message}`, 'blue');
const logWarning = (message) => log(`‚ö†Ô∏è  ${message}`, 'yellow');

async function testFriendsSystem() {
  logInfo('üß™ Test du syst√®me d\'amis CommuniConnect');
  logInfo('==========================================');

  try {
    // Test 1: V√©rifier l'accessibilit√© du service
    logInfo('\n1. Test d\'accessibilit√© du service d\'amis...');
    try {
      const response = await api.get('/friends');
      if (response.data.success) {
        logSuccess('Service d\'amis accessible');
        logInfo(`Endpoints disponibles: ${Object.keys(response.data.endpoints).join(', ')}`);
      } else {
        logError('Service d\'amis non accessible');
        return;
      }
    } catch (error) {
      logError(`Erreur d'acc√®s au service: ${error.message}`);
      return;
    }

    // Test 2: Liste des amis
    logInfo('\n2. Test de r√©cup√©ration de la liste des amis...');
    try {
      const response = await api.get('/friends/list');
      if (response.data.success) {
        logSuccess(`Liste des amis r√©cup√©r√©e (${response.data.count} amis)`);
        if (response.data.friends && response.data.friends.length > 0) {
          response.data.friends.forEach((friend, index) => {
            logInfo(`  ${index + 1}. ${friend.firstName} ${friend.lastName} (${friend.quartier}, ${friend.commune})`);
          });
        } else {
          logWarning('Aucun ami trouv√© (normal en mode d√©veloppement)');
        }
      } else {
        logError('√âchec de r√©cup√©ration de la liste des amis');
      }
    } catch (error) {
      logError(`Erreur lors de la r√©cup√©ration des amis: ${error.response?.data?.message || error.message}`);
    }

    // Test 3: Demandes d'amis re√ßues
    logInfo('\n3. Test de r√©cup√©ration des demandes d\'amis...');
    try {
      const response = await api.get('/friends/requests');
      if (response.data.success) {
        logSuccess(`Demandes d'amis r√©cup√©r√©es (${response.data.count} demandes)`);
        if (response.data.requests && response.data.requests.length > 0) {
          response.data.requests.forEach((request, index) => {
            logInfo(`  ${index + 1}. ${request.requester.firstName} ${request.requester.lastName}: "${request.message}"`);
          });
        } else {
          logWarning('Aucune demande d\'ami re√ßue (normal en mode d√©veloppement)');
        }
      } else {
        logError('√âchec de r√©cup√©ration des demandes d\'amis');
      }
    } catch (error) {
      logError(`Erreur lors de la r√©cup√©ration des demandes: ${error.response?.data?.message || error.message}`);
    }

    // Test 4: Envoi d'une demande d'ami (simulation)
    logInfo('\n4. Test d\'envoi de demande d\'ami...');
    try {
      const testRequest = {
        recipientId: 'test-user-123',
        message: 'Salut ! Je voudrais te connecter pour √©changer sur notre quartier.'
      };
      
      const response = await api.post('/friends/send-request', testRequest);
      if (response.data.success) {
        logSuccess('Demande d\'ami envoy√©e avec succ√®s');
        logInfo(`Message: "${testRequest.message}"`);
      } else {
        logError('√âchec de l\'envoi de la demande d\'ami');
      }
    } catch (error) {
      if (error.response?.status === 400 && error.response?.data?.message?.includes('existe d√©j√†')) {
        logWarning('Demande d\'ami d√©j√† existante (comportement normal)');
      } else {
        logError(`Erreur lors de l'envoi de la demande: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 5: Acceptation d'une demande (simulation)
    logInfo('\n5. Test d\'acceptation de demande d\'ami...');
    try {
      const testFriendshipId = 'test-friendship-123';
      const response = await api.put(`/friends/accept/${testFriendshipId}`);
      if (response.data.success) {
        logSuccess('Demande d\'ami accept√©e avec succ√®s');
      } else {
        logError('√âchec de l\'acceptation de la demande');
      }
    } catch (error) {
      if (error.response?.status === 404) {
        logWarning('Demande d\'ami non trouv√©e (normal en mode d√©veloppement)');
      } else {
        logError(`Erreur lors de l'acceptation: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 6: Rejet d'une demande (simulation)
    logInfo('\n6. Test de rejet de demande d\'ami...');
    try {
      const testFriendshipId = 'test-friendship-456';
      const response = await api.put(`/friends/reject/${testFriendshipId}`);
      if (response.data.success) {
        logSuccess('Demande d\'ami rejet√©e avec succ√®s');
      } else {
        logError('√âchec du rejet de la demande');
      }
    } catch (error) {
      if (error.response?.status === 404) {
        logWarning('Demande d\'ami non trouv√©e (normal en mode d√©veloppement)');
      } else {
        logError(`Erreur lors du rejet: ${error.response?.data?.message || error.message}`);
      }
    }

    // Test 7: Suppression d'un ami (simulation)
    logInfo('\n7. Test de suppression d\'ami...');
    try {
      const testFriendshipId = 'test-friendship-789';
      const response = await api.delete(`/friends/remove/${testFriendshipId}`);
      if (response.data.success) {
        logSuccess('Ami supprim√© avec succ√®s');
      } else {
        logError('√âchec de la suppression de l\'ami');
      }
    } catch (error) {
      if (error.response?.status === 404) {
        logWarning('Relation d\'amiti√© non trouv√©e (normal en mode d√©veloppement)');
      } else {
        logError(`Erreur lors de la suppression: ${error.response?.data?.message || error.message}`);
      }
    }

    logSuccess('\nüéâ Tests du syst√®me d\'amis termin√©s avec succ√®s !');
    logInfo('Le syst√®me d\'amis est op√©rationnel et pr√™t √† √™tre utilis√©.');

  } catch (error) {
    logError(`\nüí• Erreur g√©n√©rale lors des tests: ${error.message}`);
    if (error.code === 'ECONNREFUSED') {
      logError('Le serveur n\'est pas d√©marr√©. Veuillez d√©marrer le serveur avec: npm run server');
    }
  }
}

// Ex√©cution des tests
if (require.main === module) {
  testFriendsSystem();
}

module.exports = { testFriendsSystem }; 