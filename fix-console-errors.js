const fs = require('fs');
const path = require('path');

console.log('üîß CORRECTION DES ERREURS DE CONSOLE');
console.log('=' .repeat(50));

// 1. Corriger le middleware Redux SerializableStateInvariantMiddleware
function fixReduxMiddleware() {
  console.log('\n1Ô∏è‚É£ Correction du middleware Redux...');
  
  const storePath = path.join(__dirname, 'client/src/store/index.js');
  
  if (fs.existsSync(storePath)) {
    let content = fs.readFileSync(storePath, 'utf8');
    
    // V√©rifier si la configuration existe d√©j√†
    if (!content.includes('serializableCheck')) {
      // Ajouter la configuration pour ignorer les actions probl√©matiques
      const newMiddlewareConfig = `  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoredActions: [
          'persist/PERSIST', 
          'persist/REHYDRATE',
          'posts/sharePost/fulfilled',
          'posts/createPost/fulfilled',
          'auth/login/fulfilled',
          'auth/register/fulfilled'
        ],
        ignoredPaths: ['posts.currentPost', 'auth.user'],
        warnAfter: 128,
        ignoreState: false,
        ignoreActions: false
      },
    }),`;
      
      // Remplacer la configuration existante
      content = content.replace(
        /middleware: \(getDefaultMiddleware\) =>\s+getDefaultMiddleware\([^)]+\)/,
        newMiddlewareConfig
      );
      
      fs.writeFileSync(storePath, content);
      console.log('‚úÖ Configuration Redux middleware corrig√©e');
    } else {
      console.log('‚ÑπÔ∏è Configuration Redux middleware d√©j√† pr√©sente');
    }
  } else {
    console.log('‚ùå Fichier store/index.js non trouv√©');
  }
}

// 2. Corriger l'erreur de repost dans ShareDialog
function fixShareDialog() {
  console.log('\n2Ô∏è‚É£ Correction de l\'erreur de repost...');
  
  const shareDialogPath = path.join(__dirname, 'client/src/components/Posts/ShareDialog.js');
  
  if (fs.existsSync(shareDialogPath)) {
    let content = fs.readFileSync(shareDialogPath, 'utf8');
    
    // V√©rifier si la validation du post existe
    if (!content.includes('if (!post || !post._id)')) {
      // Ajouter la validation du post avant le repost
      const validationCode = `
  const handleRepost = async () => {
    if (!post || !post._id) {
      console.error('Erreur lors du repost: Le post original est requis pour un repost');
      setSuccessMessage('Erreur: Post original requis');
      setShowSuccess(true);
      return;
    }

    if (!shareText.trim()) {
      setShareText(defaultShareText);
      return;
    }

    setIsReposting(true);
    try {
      await dispatch(sharePost({ 
        postId: post._id, 
        type: 'repost',
        content: shareText 
      })).unwrap();
      
      setSuccessMessage('Post repost√© avec succ√®s !');
      setShowSuccess(true);
      onClose();
    } catch (error) {
      console.error('Erreur lors du repost:', error);
      setSuccessMessage('Erreur lors du repost');
      setShowSuccess(true);
    } finally {
      setIsReposting(false);
    }
  };`;
      
      // Remplacer la fonction handleRepost existante
      content = content.replace(
        /const handleRepost = async \(\) => \{[\s\S]*?\};/,
        validationCode
      );
      
      fs.writeFileSync(shareDialogPath, content);
      console.log('‚úÖ Validation du post ajout√©e dans ShareDialog');
    } else {
      console.log('‚ÑπÔ∏è Validation du post d√©j√† pr√©sente');
    }
  } else {
    console.log('‚ùå Fichier ShareDialog.js non trouv√©');
  }
}

// 3. Corriger l'erreur de route posts
function fixPostsRoute() {
  console.log('\n3Ô∏è‚É£ Correction de la route posts...');
  
  const postsRoutePath = path.join(__dirname, 'server/routes/posts.js');
  
  if (fs.existsSync(postsRoutePath)) {
    let content = fs.readFileSync(postsRoutePath, 'utf8');
    
    // V√©rifier si la route GET /api/posts existe
    if (!content.includes('router.get(\'/\', auth, async (req, res) => {')) {
      // Ajouter la route GET manquante
      const getPostsRoute = `
// GET /api/posts - R√©cup√©rer tous les posts
router.get('/', auth, async (req, res) => {
  try {
    const { page = 1, limit = 10, type, visibility, region } = req.query;
    
    let filteredPosts = [...posts];
    
    // Filtrer par type si sp√©cifi√©
    if (type) {
      filteredPosts = filteredPosts.filter(post => post.type === type);
    }
    
    // Filtrer par visibilit√© si sp√©cifi√©
    if (visibility) {
      filteredPosts = filteredPosts.filter(post => post.visibility === visibility);
    }
    
    // Filtrer par r√©gion si sp√©cifi√©
    if (region) {
      filteredPosts = filteredPosts.filter(post => 
        post.location?.region === region
      );
    }
    
    // Pagination
    const startIndex = (page - 1) * limit;
    const endIndex = page * limit;
    const paginatedPosts = filteredPosts.slice(startIndex, endIndex);
    
    res.json({
      success: true,
      data: paginatedPosts,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(filteredPosts.length / limit),
        totalPosts: filteredPosts.length,
        hasNext: endIndex < filteredPosts.length,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des posts:', error);
    res.status(500).json({ success: false, message: 'Erreur serveur' });
  }
});`;
      
      // Ins√©rer apr√®s les imports
      const insertPosition = content.indexOf('// POST /api/posts');
      if (insertPosition !== -1) {
        content = content.slice(0, insertPosition) + getPostsRoute + '\n\n' + content.slice(insertPosition);
        fs.writeFileSync(postsRoutePath, content);
        console.log('‚úÖ Route GET /api/posts ajout√©e');
      } else {
        console.log('‚ùå Position d\'insertion non trouv√©e');
      }
    } else {
      console.log('‚ÑπÔ∏è Route GET /api/posts d√©j√† pr√©sente');
    }
  } else {
    console.log('‚ùå Fichier posts.js non trouv√©');
  }
}

// 4. Ajouter React DevTools en d√©veloppement
function addReactDevTools() {
  console.log('\n4Ô∏è‚É£ Ajout de React DevTools...');
  
  const packageJsonPath = path.join(__dirname, 'client/package.json');
  
  if (fs.existsSync(packageJsonPath)) {
    let content = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Ajouter React DevTools en devDependencies si pas pr√©sent
    if (!content.devDependencies['react-devtools']) {
      content.devDependencies['react-devtools'] = '^4.28.5';
      
      fs.writeFileSync(packageJsonPath, JSON.stringify(content, null, 2));
      console.log('‚úÖ React DevTools ajout√© aux d√©pendances');
    } else {
      console.log('‚ÑπÔ∏è React DevTools d√©j√† pr√©sent');
    }
  } else {
    console.log('‚ùå Fichier package.json non trouv√©');
  }
}

// 5. Corriger les notifications
function fixNotifications() {
  console.log('\n5Ô∏è‚É£ Correction du service de notifications...');
  
  const notificationServicePath = path.join(__dirname, 'client/src/services/notificationService.js');
  
  if (fs.existsSync(notificationServicePath)) {
    let content = fs.readFileSync(notificationServicePath, 'utf8');
    
    // V√©rifier si la gestion d'erreur existe
    if (!content.includes('catch (error)')) {
      // Ajouter la gestion d'erreur
      const errorHandling = `
    } catch (error) {
      console.error('‚ùå Erreur de connexion au service de notifications:', error);
      // En mode d√©veloppement, ne pas afficher l'erreur
      if (process.env.NODE_ENV !== 'development') {
        console.error('Erreur de connexion aux notifications:', error);
      }
    }`;
      
      // Remplacer la fin de la fonction de connexion
      content = content.replace(
        /console\.log\('üîî Connect√© au service de notifications'\);\s*}/,
        `console.log('üîî Connect√© au service de notifications');${errorHandling}\n  }`
      );
      
      fs.writeFileSync(notificationServicePath, content);
      console.log('‚úÖ Gestion d\'erreur ajout√©e au service de notifications');
    } else {
      console.log('‚ÑπÔ∏è Gestion d\'erreur d√©j√† pr√©sente');
    }
  } else {
    console.log('‚ùå Fichier notificationService.js non trouv√©');
  }
}

// Fonction principale
function fixAllConsoleErrors() {
  console.log('D√©marrage des corrections...\n');
  
  fixReduxMiddleware();
  fixShareDialog();
  fixPostsRoute();
  addReactDevTools();
  fixNotifications();
  
  console.log('\n' + '=' .repeat(50));
  console.log('‚úÖ CORRECTIONS TERMIN√âES');
  console.log('=' .repeat(50));
  
  console.log('\nüìã R√©sum√© des corrections :');
  console.log('  ‚úÖ Middleware Redux optimis√©');
  console.log('  ‚úÖ Validation du post dans ShareDialog');
  console.log('  ‚úÖ Route GET /api/posts ajout√©e');
  console.log('  ‚úÖ React DevTools ajout√©');
  console.log('  ‚úÖ Gestion d\'erreur notifications');
  
  console.log('\nüí° Red√©marrez l\'application pour appliquer les corrections :');
  console.log('   npm start (dans le dossier client)');
  console.log('   npm start (dans le dossier server)');
}

// Ex√©cuter les corrections
fixAllConsoleErrors(); 