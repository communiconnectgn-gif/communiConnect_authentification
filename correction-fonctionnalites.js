const fs = require('fs');
const path = require('path');

class CorrectionFonctionnalites {
  constructor() {
    this.corrections = [];
  }

  // Correction 1: V√©rifier et corriger les routes de lives
  async corrigerLives() {
    console.log('\nüì∫ Correction des fonctionnalit√©s Lives...');
    
    const livestreamsRoute = path.join(__dirname, 'server', 'routes', 'livestreams.js');
    
    if (fs.existsSync(livestreamsRoute)) {
      const content = fs.readFileSync(livestreamsRoute, 'utf8');
      
      // V√©rifier si la route POST existe
      if (content.includes('router.post(\'/\', auth')) {
        this.corrections.push('‚úÖ Route POST /livestreams existe');
      } else {
        this.corrections.push('‚ùå Route POST /livestreams manquante');
      }
      
      // V√©rifier la gestion des erreurs
      if (content.includes('catch (error)')) {
        this.corrections.push('‚úÖ Gestion d\'erreurs pr√©sente');
      } else {
        this.corrections.push('‚ùå Gestion d\'erreurs manquante');
      }
    } else {
      this.corrections.push('‚ùå Fichier livestreams.js non trouv√©');
    }
  }

  // Correction 2: V√©rifier et corriger les routes d'√©v√©nements
  async corrigerEvents() {
    console.log('\nüìÖ Correction des fonctionnalit√©s √âv√©nements...');
    
    const eventsRoute = path.join(__dirname, 'server', 'routes', 'events.js');
    
    if (fs.existsSync(eventsRoute)) {
      const content = fs.readFileSync(eventsRoute, 'utf8');
      
      // V√©rifier si la route POST existe
      if (content.includes('router.post(\'/\', [')) {
        this.corrections.push('‚úÖ Route POST /events existe');
      } else {
        this.corrections.push('‚ùå Route POST /events manquante');
      }
      
      // V√©rifier la validation
      if (content.includes('body(\'title\')')) {
        this.corrections.push('‚úÖ Validation des donn√©es pr√©sente');
      } else {
        this.corrections.push('‚ùå Validation des donn√©es manquante');
      }
    } else {
      this.corrections.push('‚ùå Fichier events.js non trouv√©');
    }
  }

  // Correction 3: V√©rifier et corriger les routes de messages
  async corrigerMessages() {
    console.log('\nüí¨ Correction des fonctionnalit√©s Messages...');
    
    const messagesRoute = path.join(__dirname, 'server', 'routes', 'messages.js');
    
    if (fs.existsSync(messagesRoute)) {
      const content = fs.readFileSync(messagesRoute, 'utf8');
      
      // V√©rifier si la route POST pour les conversations existe
      if (content.includes('router.post(\'/conversations\', auth')) {
        this.corrections.push('‚úÖ Route POST /messages/conversations existe');
      } else {
        this.corrections.push('‚ùå Route POST /messages/conversations manquante');
      }
      
      // V√©rifier si la route POST pour l'envoi de messages existe
      if (content.includes('router.post(\'/send\', auth')) {
        this.corrections.push('‚úÖ Route POST /messages/send existe');
      } else {
        this.corrections.push('‚ùå Route POST /messages/send manquante');
      }
    } else {
      this.corrections.push('‚ùå Fichier messages.js non trouv√©');
    }
  }

  // Correction 4: V√©rifier et corriger les routes d'amis
  async corrigerFriends() {
    console.log('\nüë• Correction des fonctionnalit√©s Amis...');
    
    const friendsRoute = path.join(__dirname, 'server', 'routes', 'friends.js');
    
    if (fs.existsSync(friendsRoute)) {
      const content = fs.readFileSync(friendsRoute, 'utf8');
      
      // V√©rifier si la route POST pour les demandes d'amis existe
      if (content.includes('router.post(\'/request\', auth')) {
        this.corrections.push('‚úÖ Route POST /friends/request existe');
      } else {
        this.corrections.push('‚ùå Route POST /friends/request manquante');
      }
      
      // V√©rifier la gestion des emails
      if (content.includes('recipientId.includes(\'@\')')) {
        this.corrections.push('‚úÖ Gestion des emails pr√©sente');
      } else {
        this.corrections.push('‚ùå Gestion des emails manquante');
      }
    } else {
      this.corrections.push('‚ùå Fichier friends.js non trouv√©');
    }
  }

  // Correction 5: V√©rifier et corriger les routes de profil
  async corrigerProfile() {
    console.log('\nüë§ Correction des fonctionnalit√©s Photo de Profil...');
    
    const usersRoute = path.join(__dirname, 'server', 'routes', 'users.js');
    
    if (fs.existsSync(usersRoute)) {
      const content = fs.readFileSync(usersRoute, 'utf8');
      
      // V√©rifier si la route PUT pour le profil existe
      if (content.includes('router.put(\'/profile\', auth') || content.includes('router.put(\'/profile\'')) {
        this.corrections.push('‚úÖ Route PUT /users/profile existe');
      } else {
        this.corrections.push('‚ùå Route PUT /users/profile manquante');
      }
    } else {
      this.corrections.push('‚ùå Fichier users.js non trouv√©');
    }
  }

  // Correction 6: V√©rifier les services c√¥t√© client
  async corrigerServicesClient() {
    console.log('\nüîß Correction des services c√¥t√© client...');
    
    const servicesDir = path.join(__dirname, 'client', 'src', 'services');
    
    if (fs.existsSync(servicesDir)) {
      const services = ['livestreamsService.js', 'eventsService.js', 'messagesService.js', 'friendsService.js'];
      
      services.forEach(service => {
        const servicePath = path.join(servicesDir, service);
        if (fs.existsSync(servicePath)) {
          this.corrections.push(`‚úÖ Service ${service} existe`);
        } else {
          this.corrections.push(`‚ùå Service ${service} manquant`);
        }
      });
    } else {
      this.corrections.push('‚ùå Dossier services non trouv√©');
    }
  }

  // Correction 7: V√©rifier les composants c√¥t√© client
  async corrigerComposantsClient() {
    console.log('\nüé® Correction des composants c√¥t√© client...');
    
    const componentsDir = path.join(__dirname, 'client', 'src', 'components');
    
    if (fs.existsSync(componentsDir)) {
      const composants = [
        'Livestreams/CreateLivestreamForm.js',
        'Events/CreateEventForm.js',
        'Messages/MessageComposer.js',
        'Friends/FriendsPage.js',
        'Profile/ProfileEdit.js'
      ];
      
      composants.forEach(composant => {
        const composantPath = path.join(componentsDir, composant);
        if (fs.existsSync(composantPath)) {
          this.corrections.push(`‚úÖ Composant ${composant} existe`);
        } else {
          this.corrections.push(`‚ùå Composant ${composant} manquant`);
        }
      });
    } else {
      this.corrections.push('‚ùå Dossier components non trouv√©');
    }
  }

  // Correction 8: V√©rifier la configuration du serveur
  async corrigerConfigurationServeur() {
    console.log('\n‚öôÔ∏è Correction de la configuration serveur...');
    
    const serverIndex = path.join(__dirname, 'server', 'index.js');
    
    if (fs.existsSync(serverIndex)) {
      const content = fs.readFileSync(serverIndex, 'utf8');
      
      // V√©rifier les routes
      if (content.includes('app.use(\'/api/livestreams\', require(\'./routes/livestreams\')')) {
        this.corrections.push('‚úÖ Route livestreams configur√©e');
      } else {
        this.corrections.push('‚ùå Route livestreams non configur√©e');
      }
      
      if (content.includes('app.use(\'/api/events\', require(\'./routes/events\')')) {
        this.corrections.push('‚úÖ Route events configur√©e');
      } else {
        this.corrections.push('‚ùå Route events non configur√©e');
      }
      
      if (content.includes('app.use(\'/api/messages\', require(\'./routes/messages\')')) {
        this.corrections.push('‚úÖ Route messages configur√©e');
      } else {
        this.corrections.push('‚ùå Route messages non configur√©e');
      }
      
      if (content.includes('app.use(\'/api/friends\', require(\'./routes/friends\')')) {
        this.corrections.push('‚úÖ Route friends configur√©e');
      } else {
        this.corrections.push('‚ùå Route friends non configur√©e');
      }
    } else {
      this.corrections.push('‚ùå Fichier index.js serveur non trouv√©');
    }
  }

  async executerCorrections() {
    console.log('üöÄ D√©marrage des corrections CommuniConnect...\n');
    
    try {
      await this.corrigerLives();
      await this.corrigerEvents();
      await this.corrigerMessages();
      await this.corrigerFriends();
      await this.corrigerProfile();
      await this.corrigerServicesClient();
      await this.corrigerComposantsClient();
      await this.corrigerConfigurationServeur();
      
      this.genererRapport();
      
    } catch (error) {
      console.error('Erreur lors des corrections:', error);
    }
  }

  genererRapport() {
    console.log('\nüìä RAPPORT DE CORRECTION');
    console.log('=' .repeat(50));
    
    const correctionsReussies = this.corrections.filter(c => c.includes('‚úÖ')).length;
    const correctionsEchouees = this.corrections.filter(c => c.includes('‚ùå')).length;
    
    console.log(`\n‚úÖ Corrections r√©ussies: ${correctionsReussies}`);
    console.log(`‚ùå Corrections √©chou√©es: ${correctionsEchouees}`);
    console.log(`üìà Taux de succ√®s: ${Math.round((correctionsReussies / (correctionsReussies + correctionsEchouees)) * 100)}%`);
    
    console.log('\nüìã D√âTAIL DES CORRECTIONS:');
    this.corrections.forEach(correction => {
      console.log(`  ${correction}`);
    });
    
    if (correctionsEchouees === 0) {
      console.log('\nüéâ TOUTES LES FONCTIONNALIT√âS SONT CORRECTEMENT CONFIGUR√âES !');
    } else {
      console.log('\n‚ö†Ô∏è DES PROBL√àMES ONT √âT√â IDENTIFI√âS');
      console.log('\nüîß ACTIONS RECOMMAND√âES:');
      console.log('1. V√©rifier que tous les fichiers de routes existent');
      console.log('2. V√©rifier la configuration dans server/index.js');
      console.log('3. V√©rifier les services c√¥t√© client');
      console.log('4. V√©rifier les composants c√¥t√© client');
      console.log('5. Red√©marrer le serveur apr√®s corrections');
    }
  }
}

async function main() {
  const correcteur = new CorrectionFonctionnalites();
  await correcteur.executerCorrections();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = CorrectionFonctionnalites; 