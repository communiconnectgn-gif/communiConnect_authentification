const fs = require('fs');

console.log('üéØ TEST FINAL COMPLET - FONCTIONNALIT√â "MES AMIS"');
console.log('==================================================');

let allTestsPassed = true;
const errors = [];

// TEST 1: Fichiers essentiels
console.log('\nüìÅ TEST 1: Fichiers essentiels');
const essentialFiles = [
  'client/src/pages/Friends/FriendsPage.js',
  'client/src/components/common/LazyLoader.js',
  'client/src/App.js',
  'server/routes/friends.js',
  'server/index.js'
];

essentialFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) {
    allTestsPassed = false;
    errors.push(`Fichier manquant: ${file}`);
  }
});

// TEST 2: App.js - Configuration compl√®te
console.log('\nüîç TEST 2: App.js - Configuration compl√®te');
if (fs.existsSync('client/src/App.js')) {
  const appContent = fs.readFileSync('client/src/App.js', 'utf8');
  
  const appChecks = [
    { test: appContent.includes('LazyFriendsPage'), name: 'Import LazyFriendsPage' },
    { test: appContent.includes('path="friends"'), name: 'Route /friends d√©finie' },
    { test: appContent.includes('element={<LazyFriendsPage />}'), name: '√âl√©ment LazyFriendsPage' }
  ];
  
  appChecks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!check.test) {
      allTestsPassed = false;
      errors.push(`App.js: ${check.name} manquant`);
    }
  });
  
  // V√©rifier qu'il n'y a pas de double import
  const lazyCount = (appContent.match(/LazyFriendsPage/g) || []).length;
  if (lazyCount !== 1) {
    console.log(`   ‚ùå Import LazyFriendsPage: ${lazyCount} fois (devrait √™tre 1)`);
    allTestsPassed = false;
    errors.push(`App.js: Import en double de LazyFriendsPage (${lazyCount} fois)`);
  } else {
    console.log(`   ‚úÖ Import LazyFriendsPage: ${lazyCount} fois`);
  }
} else {
  console.log('   ‚ùå App.js non trouv√©');
  allTestsPassed = false;
  errors.push('App.js non trouv√©');
}

// TEST 3: LazyLoader.js - Export correct
console.log('\nüîç TEST 3: LazyLoader.js - Export correct');
if (fs.existsSync('client/src/components/common/LazyLoader.js')) {
  const lazyContent = fs.readFileSync('client/src/components/common/LazyLoader.js', 'utf8');
  
  const lazyChecks = [
    { test: lazyContent.includes('export const LazyFriendsPage'), name: 'Export LazyFriendsPage' },
    { test: lazyContent.includes('import(\'../../pages/Friends/FriendsPage\')'), name: 'Import FriendsPage' }
  ];
  
  lazyChecks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!check.test) {
      allTestsPassed = false;
      errors.push(`LazyLoader.js: ${check.name} manquant`);
    }
  });
} else {
  console.log('   ‚ùå LazyLoader.js non trouv√©');
  allTestsPassed = false;
  errors.push('LazyLoader.js non trouv√©');
}

// TEST 4: FriendsPage.js - Composant correct
console.log('\nüîç TEST 4: FriendsPage.js - Composant correct');
if (fs.existsSync('client/src/pages/Friends/FriendsPage.js')) {
  const friendsContent = fs.readFileSync('client/src/pages/Friends/FriendsPage.js', 'utf8');
  
  const friendsChecks = [
    { test: friendsContent.includes('const FriendsPage') || friendsContent.includes('function FriendsPage'), name: 'D√©finition FriendsPage' },
    { test: friendsContent.includes('export default FriendsPage'), name: 'Export par d√©faut' },
    { test: friendsContent.includes('return ('), name: 'Return JSX' }
  ];
  
  friendsChecks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!check.test) {
      allTestsPassed = false;
      errors.push(`FriendsPage.js: ${check.name} manquant`);
    }
  });
} else {
  console.log('   ‚ùå FriendsPage.js non trouv√©');
  allTestsPassed = false;
  errors.push('FriendsPage.js non trouv√©');
}

// TEST 5: Serveur - Route friends configur√©e
console.log('\nüîç TEST 5: Serveur - Route friends configur√©e');
if (fs.existsSync('server/index.js')) {
  const serverContent = fs.readFileSync('server/index.js', 'utf8');
  
  const serverChecks = [
    { test: serverContent.includes('friends'), name: 'Route friends incluse' },
    { test: serverContent.includes('app.use(\'/api/friends\''), name: 'Configuration route friends' }
  ];
  
  serverChecks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!check.test) {
      allTestsPassed = false;
      errors.push(`Serveur: ${check.name} manquant`);
    }
  });
} else {
  console.log('   ‚ùå server/index.js non trouv√©');
  allTestsPassed = false;
  errors.push('server/index.js non trouv√©');
}

// TEST 6: Route serveur - Fichier pr√©sent
console.log('\nüîç TEST 6: Route serveur - Fichier pr√©sent');
if (fs.existsSync('server/routes/friends.js')) {
  const routeContent = fs.readFileSync('server/routes/friends.js', 'utf8');
  
  const routeChecks = [
    { test: routeContent.includes('router.get'), name: 'Route GET' },
    { test: routeContent.includes('module.exports'), name: 'Export module' }
  ];
  
  routeChecks.forEach(check => {
    console.log(`   ${check.test ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!check.test) {
      allTestsPassed = false;
      errors.push(`Route friends.js: ${check.name} manquant`);
    }
  });
} else {
  console.log('   ‚ùå server/routes/friends.js non trouv√©');
  allTestsPassed = false;
  errors.push('server/routes/friends.js non trouv√©');
}

// R√âSUM√â FINAL
console.log('\nüéØ R√âSUM√â FINAL');
console.log('================');

if (allTestsPassed) {
  console.log('‚úÖ TOUS LES TESTS R√âUSSIS !');
  console.log('üöÄ LA FONCTIONNALIT√â "MES AMIS" EST OP√âRATIONNELLE');
  console.log('');
  console.log('üí° Prochaines √©tapes:');
  console.log('1. Red√©marrez le serveur: cd server && npm start');
  console.log('2. Red√©marrez le client: cd client && npm start');
  console.log('3. Testez la navigation vers /friends');
  console.log('4. La fonctionnalit√© devrait fonctionner parfaitement !');
} else {
  console.log('‚ùå PROBL√àMES D√âTECT√âS');
  console.log('========================');
  console.log('Erreurs trouv√©es:');
  errors.forEach(error => {
    console.log(`   - ${error}`);
  });
  console.log('');
  console.log('üîß Actions n√©cessaires:');
  console.log('1. Corrigez les erreurs list√©es ci-dessus');
  console.log('2. Relancez ce test apr√®s correction');
  console.log('3. Ne testez pas l\'application tant que tous les tests ne passent pas');
}

console.log('\nüéØ TEST FINAL TERMIN√â');
console.log('======================'); 