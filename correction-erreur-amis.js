const fs = require('fs');

console.log('üîß CORRECTION ERREUR R√âCUP√âRATION AMIS');
console.log('=========================================');

// 1. V√©rifier et corriger friendsSlice.js
console.log('\nüìÅ √âTAPE 1: V√©rification friendsSlice.js');
const friendsSlicePath = 'client/src/store/slices/friendsSlice.js';

if (fs.existsSync(friendsSlicePath)) {
  let content = fs.readFileSync(friendsSlicePath, 'utf8');
  console.log('   ‚úÖ Fichier pr√©sent');
  
  // V√©rifier si l'URL de l'API est correcte
  if (!content.includes('/api/friends')) {
    console.log('   üîß Correction URL API...');
    content = content.replace(
      /fetchFriends = createAsyncThunk\([^,]+,\s*async\s*\([^)]*\)\s*=>\s*\{[^}]*\}/,
      `fetchFriends = createAsyncThunk(
  'friends/fetchFriends',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('/api/friends', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Erreur lors de la r√©cup√©ration des amis');
      }
      
      const data = await response.json();
      return data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
)`
    );
    fs.writeFileSync(friendsSlicePath, content);
    console.log('   ‚úÖ URL API corrig√©e');
  } else {
    console.log('   ‚úÖ URL API correcte');
  }
} else {
  console.log('   ‚ùå Fichier manquant');
}

// 2. V√©rifier et corriger FriendsPage.js
console.log('\nüìÅ √âTAPE 2: V√©rification FriendsPage.js');
const friendsPagePath = 'client/src/pages/Friends/FriendsPage.js';

if (fs.existsSync(friendsPagePath)) {
  let content = fs.readFileSync(friendsPagePath, 'utf8');
  console.log('   ‚úÖ Fichier pr√©sent');
  
  // V√©rifier la gestion d'erreur
  if (!content.includes('error') || !content.includes('catch')) {
    console.log('   üîß Am√©lioration gestion d\'erreur...');
    
    // Ajouter une meilleure gestion d'erreur
    const errorHandlingCode = `
  // Gestion d'erreur am√©lior√©e
  useEffect(() => {
    if (error) {
      console.error('Erreur lors de la r√©cup√©ration des amis:', error);
      // Ici vous pouvez ajouter une notification d'erreur
    }
  }, [error]);
`;
    
    // Ins√©rer apr√®s le useEffect existant
    if (content.includes('useEffect')) {
      const useEffectIndex = content.lastIndexOf('useEffect');
      const insertIndex = content.indexOf('}', useEffectIndex) + 1;
      content = content.slice(0, insertIndex) + errorHandlingCode + content.slice(insertIndex);
    }
    
    fs.writeFileSync(friendsPagePath, content);
    console.log('   ‚úÖ Gestion d\'erreur am√©lior√©e');
  } else {
    console.log('   ‚úÖ Gestion d\'erreur pr√©sente');
  }
} else {
  console.log('   ‚ùå Fichier manquant');
}

// 3. V√©rifier la route serveur
console.log('\nüìÅ √âTAPE 3: V√©rification route serveur');
const friendsRoutePath = 'server/routes/friends.js';

if (fs.existsSync(friendsRoutePath)) {
  let content = fs.readFileSync(friendsRoutePath, 'utf8');
  console.log('   ‚úÖ Fichier pr√©sent');
  
  // V√©rifier si la route GET existe et g√®re les erreurs
  if (!content.includes('router.get')) {
    console.log('   üîß Ajout route GET...');
    const getRoute = `
// Route pour r√©cup√©rer la liste des amis
router.get('/', async (req, res) => {
  try {
    // Ici vous pouvez ajouter la logique pour r√©cup√©rer les amis
    // Pour l'instant, retournons un tableau vide
    res.json({ friends: [] });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des amis:', error);
    res.status(500).json({ error: 'Erreur serveur lors de la r√©cup√©ration des amis' });
  }
});
`;
    content = content + getRoute;
    fs.writeFileSync(friendsRoutePath, content);
    console.log('   ‚úÖ Route GET ajout√©e');
  } else {
    console.log('   ‚úÖ Route GET pr√©sente');
  }
} else {
  console.log('   ‚ùå Fichier manquant');
}

// 4. V√©rifier la configuration serveur
console.log('\nüìÅ √âTAPE 4: V√©rification configuration serveur');
const serverIndexPath = 'server/index.js';

if (fs.existsSync(serverIndexPath)) {
  let content = fs.readFileSync(serverIndexPath, 'utf8');
  console.log('   ‚úÖ Fichier pr√©sent');
  
  // V√©rifier si les routes friends sont configur√©es
  if (!content.includes('app.use') || !content.includes('friends')) {
    console.log('   üîß Ajout configuration routes friends...');
    
    // Ajouter l'import si n√©cessaire
    if (!content.includes('require(\'./routes/friends\')')) {
      const importLine = "const friendsRoutes = require('./routes/friends');\n";
      const lastImportIndex = content.lastIndexOf('require(');
      const insertIndex = content.indexOf('\n', lastImportIndex) + 1;
      content = content.slice(0, insertIndex) + importLine + content.slice(insertIndex);
    }
    
    // Ajouter l'utilisation des routes
    const useLine = "app.use('/api/friends', friendsRoutes);\n";
    const lastUseIndex = content.lastIndexOf('app.use');
    const insertIndex = content.indexOf('\n', lastUseIndex) + 1;
    content = content.slice(0, insertIndex) + useLine + content.slice(insertIndex);
    
    fs.writeFileSync(serverIndexPath, content);
    console.log('   ‚úÖ Configuration routes friends ajout√©e');
  } else {
    console.log('   ‚úÖ Configuration routes friends pr√©sente');
  }
} else {
  console.log('   ‚ùå Fichier manquant');
}

console.log('\nüéØ CORRECTION TERMIN√âE');
console.log('========================');
console.log('\nüí° Prochaines √©tapes:');
console.log('1. Red√©marrez le serveur: cd server && npm start');
console.log('2. Red√©marrez le client: cd client && npm start');
console.log('3. Testez la fonctionnalit√© "Mes amis"');
console.log('4. V√©rifiez les logs du serveur pour les erreurs'); 