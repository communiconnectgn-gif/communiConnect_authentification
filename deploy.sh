#!/bin/bash

# üöÄ Script de D√©ploiement CommuniConnect
# Ce script automatise le processus de d√©ploiement

echo "üöÄ D√©ploiement CommuniConnect - Render (Backend) + Vercel (Frontend)"
echo "=================================================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        print_error "Git n'est pas install√©. Veuillez l'installer."
        exit 1
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas install√©. Veuillez l'installer."
        exit 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas install√©. Veuillez l'installer."
        exit 1
    fi
    
    print_success "Tous les pr√©requis sont satisfaits"
}

# V√©rification de la structure du projet
check_project_structure() {
    print_status "V√©rification de la structure du projet..."
    
    if [ ! -d "server" ]; then
        print_error "Le dossier 'server' n'existe pas"
        exit 1
    fi
    
    if [ ! -d "client" ]; then
        print_error "Le dossier 'client' n'existe pas"
        exit 1
    fi
    
    if [ ! -f "render.yaml" ]; then
        print_error "Le fichier 'render.yaml' n'existe pas"
        exit 1
    fi
    
    if [ ! -f "client/vercel.json" ]; then
        print_error "Le fichier 'client/vercel.json' n'existe pas"
        exit 1
    fi
    
    print_success "Structure du projet valid√©e"
}

# Installation des d√©pendances
install_dependencies() {
    print_status "Installation des d√©pendances..."
    
    # Backend
    print_status "Installation des d√©pendances backend..."
    cd server
    npm install
    if [ $? -ne 0 ]; then
        print_error "Erreur lors de l'installation des d√©pendances backend"
        exit 1
    fi
    cd ..
    
    # Frontend
    print_status "Installation des d√©pendances frontend..."
    cd client
    npm install
    if [ $? -ne 0 ]; then
        print_error "Erreur lors de l'installation des d√©pendances frontend"
        exit 1
    fi
    cd ..
    
    print_success "D√©pendances install√©es avec succ√®s"
}

# Test local
run_local_tests() {
    print_status "Tests locaux..."
    
    # Test du backend
    print_status "Test du backend..."
    cd server
    npm test 2>/dev/null || print_warning "Aucun test configur√© pour le backend"
    cd ..
    
    # Test du frontend
    print_status "Test du frontend..."
    cd client
    npm test -- --watchAll=false 2>/dev/null || print_warning "Aucun test configur√© pour le frontend"
    cd ..
    
    print_success "Tests locaux termin√©s"
}

# Build du frontend
build_frontend() {
    print_status "Build du frontend..."
    
    cd client
    npm run build
    if [ $? -ne 0 ]; then
        print_error "Erreur lors du build du frontend"
        exit 1
    fi
    cd ..
    
    print_success "Frontend build√© avec succ√®s"
}

# V√©rification Git
check_git_status() {
    print_status "V√©rification du statut Git..."
    
    if [ -z "$(git status --porcelain)" ]; then
        print_success "Aucune modification en attente"
    else
        print_warning "Modifications non commit√©es d√©tect√©es"
        echo "Modifications en attente :"
        git status --short
        
        read -p "Voulez-vous commiter ces modifications ? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "Deploy: Pr√©paration du d√©ploiement $(date)"
            print_success "Modifications commit√©es"
        else
            print_warning "D√©ploiement continu√© sans commit"
        fi
    fi
}

# Instructions de d√©ploiement
show_deployment_instructions() {
    echo
    echo "üéØ INSTRUCTIONS DE D√âPLOIEMENT"
    echo "================================"
    echo
    echo "1Ô∏è‚É£  BACKEND (Render):"
    echo "   ‚Ä¢ Allez sur https://render.com"
    echo "   ‚Ä¢ Cr√©ez un nouveau 'Blueprint'"
    echo "   ‚Ä¢ Connectez votre repository GitHub"
    echo "   ‚Ä¢ Render d√©tectera automatiquement render.yaml"
    echo "   ‚Ä¢ Configurez les variables d'environnement"
    echo "   ‚Ä¢ D√©ployez"
    echo
    echo "2Ô∏è‚É£  FRONTEND (Vercel):"
    echo "   ‚Ä¢ Allez sur https://vercel.com"
    echo "   ‚Ä¢ Cr√©ez un nouveau projet"
    echo "   ‚Ä¢ Importez votre repository GitHub"
    echo "   ‚Ä¢ Root Directory: client"
    echo "   ‚Ä¢ Framework: Create React App"
    echo "   ‚Ä¢ D√©ployez"
    echo
    echo "3Ô∏è‚É£  CONFIGURATION:"
    echo "   ‚Ä¢ Mettez √† jour les URLs dans les variables d'environnement"
    echo "   ‚Ä¢ Testez l'application"
    echo
    echo "üìö Consultez DEPLOYMENT.md pour plus de d√©tails"
}

# Menu principal
main_menu() {
    echo
    echo "üîß MENU DE D√âPLOIEMENT"
    echo "======================="
    echo "1. V√©rifier les pr√©requis"
    echo "2. V√©rifier la structure du projet"
    echo "3. Installer les d√©pendances"
    echo "4. Lancer les tests locaux"
    echo "5. Build du frontend"
    echo "6. V√©rifier le statut Git"
    echo "7. Afficher les instructions de d√©ploiement"
    echo "8. D√©ploiement complet"
    echo "9. Quitter"
    echo
    read -p "Choisissez une option (1-9): " -n 1 -r
    echo
    
    case $REPLY in
        1) check_prerequisites ;;
        2) check_project_structure ;;
        3) install_dependencies ;;
        4) run_local_tests ;;
        5) build_frontend ;;
        6) check_git_status ;;
        7) show_deployment_instructions ;;
        8) 
            check_prerequisites
            check_project_structure
            install_dependencies
            run_local_tests
            build_frontend
            check_git_status
            show_deployment_instructions
            ;;
        9) 
            print_success "Au revoir !"
            exit 0
            ;;
        *) 
            print_error "Option invalide"
            main_menu
            ;;
    esac
    
    echo
    read -p "Appuyez sur Entr√©e pour continuer..."
    main_menu
}

# D√©marrage du script
echo "Bienvenue dans le script de d√©ploiement CommuniConnect !"
main_menu 