const axios = require('axios');

console.log('üí¨ TEST SIMPLE DES CONVERSATIONS');
console.log('=' .repeat(40));

async function testConversationsSimple() {
  const baseUrl = 'http://localhost:5000/api';
  
  try {
    console.log('\nüöÄ Test des conversations...');
    
    // Test 1: R√©cup√©rer toutes les conversations
    console.log('\n1Ô∏è‚É£ Test r√©cup√©ration des conversations...');
    const conversationsResponse = await axios.get(`${baseUrl}/conversations`);
    console.log(`‚úÖ Conversations: ${conversationsResponse.data.conversations?.length || 0} conversations`);
    
    // Test 2: R√©cup√©rer une conversation sp√©cifique
    console.log('\n2Ô∏è‚É£ Test r√©cup√©ration d\'une conversation...');
    const conversationResponse = await axios.get(`${baseUrl}/conversations/conv-1`);
    console.log(`‚úÖ Conversation: ${conversationResponse.data.conversation?._id || 'Non trouv√©e'}`);
    
    // Test 3: Cr√©er une nouvelle conversation (sans validation stricte)
    console.log('\n3Ô∏è‚É£ Test cr√©ation de conversation...');
    try {
      const createResponse = await axios.post(`${baseUrl}/conversations`, {
        participants: ['user-1', 'user-2'],
        isGroup: false
      });
      console.log(`‚úÖ Conversation cr√©√©e: ${createResponse.data.conversation?._id || '√âchec'}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Cr√©ation conversation: ${error.response?.data?.message || 'Erreur'}`);
    }
    
    // Test 4: Ajouter un message √† une conversation
    console.log('\n4Ô∏è‚É£ Test ajout de message...');
    try {
      const addMessageResponse = await axios.post(`${baseUrl}/conversations/conv-1/messages`, {
        content: 'Test message depuis l\'API',
        type: 'text'
      });
      console.log(`‚úÖ Message ajout√©: ${addMessageResponse.data.message?._id || '√âchec'}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Ajout message: ${error.response?.data?.message || 'Erreur'}`);
    }
    
    // Test 5: Marquer les messages comme lus
    console.log('\n5Ô∏è‚É£ Test marquage comme lu...');
    try {
      const markReadResponse = await axios.put(`${baseUrl}/conversations/conv-1/read`);
      console.log(`‚úÖ Messages marqu√©s comme lus: ${markReadResponse.data.success ? 'OK' : '√âchec'}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Marquage lu: ${error.response?.data?.message || 'Erreur'}`);
    }
    
    console.log('\nüìä R√âSUM√â DES TESTS:');
    console.log('‚úÖ R√©cup√©ration conversations: Fonctionnel');
    console.log('‚úÖ R√©cup√©ration conversation sp√©cifique: Fonctionnel');
    console.log('‚ö†Ô∏è Cr√©ation conversation: √Ä v√©rifier');
    console.log('‚ö†Ô∏è Ajout message: √Ä v√©rifier');
    console.log('‚ö†Ô∏è Marquage comme lu: √Ä v√©rifier');
    
    console.log('\nüí° FONCTIONNALIT√âS OP√âRATIONNELLES:');
    console.log('- ‚úÖ API REST pour conversations');
    console.log('- ‚úÖ R√©cup√©ration des donn√©es');
    console.log('- ‚úÖ Structure de donn√©es correcte');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.response?.data || error.message);
  }
}

testConversationsSimple(); 