const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

// Test sans authentification d'abord
async function testDataVisibility() {
  console.log('üîç Test de visibilit√© des donn√©es fictives...\n');

  try {
    // Test 1: V√©rifier les lives (sans auth)
    console.log('üì∫ Test des lives (sans auth)...');
    const livesResponse = await axios.get(`${BASE_URL}/livestreams`);
    console.log(`‚úÖ Lives r√©cup√©r√©s: ${livesResponse.data.data?.length || 0}`);
    if (livesResponse.data.data?.length > 0) {
      console.log('   Premier live:', livesResponse.data.data[0].title);
    }

    // Test 2: V√©rifier les √©v√©nements (sans auth)
    console.log('\nüìÖ Test des √©v√©nements (sans auth)...');
    const eventsResponse = await axios.get(`${BASE_URL}/events`);
    console.log(`‚úÖ √âv√©nements r√©cup√©r√©s: ${eventsResponse.data.data?.events?.length || 0}`);
    if (eventsResponse.data.data?.events?.length > 0) {
      console.log('   Premier √©v√©nement:', eventsResponse.data.data.events[0].title);
    }

    // Test 3: V√©rifier les alertes (sans auth)
    console.log('\nüö® Test des alertes (sans auth)...');
    const alertsResponse = await axios.get(`${BASE_URL}/livestreams/alerts`);
    console.log(`‚úÖ Alertes r√©cup√©r√©es: ${alertsResponse.data.data?.length || 0}`);
    if (alertsResponse.data.data?.length > 0) {
      console.log('   Premi√®re alerte:', alertsResponse.data.data[0].title);
    }

    // Test 4: V√©rifier les conversations (sans auth)
    console.log('\nüí¨ Test des conversations (sans auth)...');
    const conversationsResponse = await axios.get(`${BASE_URL}/messages/conversations`);
    console.log(`‚úÖ Conversations r√©cup√©r√©es: ${conversationsResponse.data.conversations?.length || 0}`);
    if (conversationsResponse.data.conversations?.length > 0) {
      console.log('   Premi√®re conversation:', conversationsResponse.data.conversations[0].title);
    }

    // Test 5: V√©rifier les amis (sans auth)
    console.log('\nüë• Test des amis (sans auth)...');
    const friendsResponse = await axios.get(`${BASE_URL}/friends/list`);
    console.log(`‚úÖ Amis r√©cup√©r√©s: ${friendsResponse.data.friends?.length || 0}`);
    if (friendsResponse.data.friends?.length > 0) {
      console.log('   Premier ami:', friendsResponse.data.friends[0].firstName);
    }

    // Test 6: V√©rifier les demandes d'amis (sans auth)
    console.log('\nüì® Test des demandes d\'amis (sans auth)...');
    const requestsResponse = await axios.get(`${BASE_URL}/friends/requests`);
    console.log(`‚úÖ Demandes r√©cup√©r√©es: ${requestsResponse.data.requests?.length || 0}`);
    if (requestsResponse.data.requests?.length > 0) {
      console.log('   Premi√®re demande:', requestsResponse.data.requests[0].requester.firstName);
    }

    console.log('\nüìä R√âSUM√â COMPLET (sans auth):');
    console.log(`- Lives: ${livesResponse.data.data?.length || 0}`);
    console.log(`- √âv√©nements: ${eventsResponse.data.data?.events?.length || 0}`);
    console.log(`- Alertes: ${alertsResponse.data.data?.length || 0}`);
    console.log(`- Conversations: ${conversationsResponse.data.conversations?.length || 0}`);
    console.log(`- Amis: ${friendsResponse.data.friends?.length || 0}`);
    console.log(`- Demandes d'amis: ${requestsResponse.data.requests?.length || 0}`);

    // V√©rifier si le client React est en cours d'ex√©cution
    console.log('\nüåê Test de l\'interface client...');
    try {
      const clientResponse = await axios.get('http://localhost:3000', { timeout: 5000 });
      console.log('‚úÖ Interface client accessible sur http://localhost:3000');
    } catch (error) {
      console.log('‚ùå Interface client non accessible sur http://localhost:3000');
      console.log('   D√©marrer le client avec: cd client && npm start');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

testDataVisibility(); 