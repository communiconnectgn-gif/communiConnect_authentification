const fs = require('fs');

console.log('üîç DIAGNOSTIC COMPLET - FONCTIONNALIT√â "MES AMIS"');
console.log('===================================================');

// 1. V√©rification des fichiers essentiels
console.log('\nüìÅ 1. V√âRIFICATION DES FICHIERS:');
const files = [
  'client/src/pages/Friends/FriendsPage.js',
  'client/src/components/common/LazyLoader.js',
  'client/src/App.js',
  'server/routes/friends.js',
  'server/server.js'
];

files.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// 2. V√©rification d√©taill√©e de App.js
console.log('\nüîç 2. V√âRIFICATION D√âTAILL√âE DE App.js:');
if (fs.existsSync('client/src/App.js')) {
  const appContent = fs.readFileSync('client/src/App.js', 'utf8');
  
  // Compter les occurrences de LazyFriendsPage
  const importMatches = appContent.match(/LazyFriendsPage/g);
  const importCount = importMatches ? importMatches.length : 0;
  
  console.log(`   Import LazyFriendsPage: ${importCount} fois`);
  console.log(`   Route /friends: ${appContent.includes('path="friends"') ? '‚úÖ' : '‚ùå'}`);
  console.log(`   √âl√©ment LazyFriendsPage: ${appContent.includes('element={<LazyFriendsPage />}') ? '‚úÖ' : '‚ùå'}`);
  
  // Afficher les lignes importantes
  console.log('\nüìÑ Extrait de App.js:');
  const lines = appContent.split('\n');
  lines.forEach((line, index) => {
    if (line.includes('LazyFriendsPage') || line.includes('path="friends"')) {
      console.log(`   Ligne ${index + 1}: ${line.trim()}`);
    }
  });
}

// 3. V√©rification de LazyLoader.js
console.log('\nüîç 3. V√âRIFICATION DE LazyLoader.js:');
if (fs.existsSync('client/src/components/common/LazyLoader.js')) {
  const lazyContent = fs.readFileSync('client/src/components/common/LazyLoader.js', 'utf8');
  
  console.log(`   Export LazyFriendsPage: ${lazyContent.includes('export const LazyFriendsPage') ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Import FriendsPage: ${lazyContent.includes('import(\'../../pages/Friends/FriendsPage\')') ? '‚úÖ' : '‚ùå'}`);
  
  // Afficher la ligne d'export
  const exportLine = lazyContent.split('\n').find(line => line.includes('LazyFriendsPage'));
  if (exportLine) {
    console.log(`   Ligne d'export: ${exportLine.trim()}`);
  }
}

// 4. V√©rification de FriendsPage.js
console.log('\nüîç 4. V√âRIFICATION DE FriendsPage.js:');
if (fs.existsSync('client/src/pages/Friends/FriendsPage.js')) {
  const friendsContent = fs.readFileSync('client/src/pages/Friends/FriendsPage.js', 'utf8');
  
  console.log(`   D√©finition const FriendsPage: ${friendsContent.includes('const FriendsPage') ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Export par d√©faut: ${friendsContent.includes('export default FriendsPage') ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Return JSX: ${friendsContent.includes('return (') ? '‚úÖ' : '‚ùå'}`);
  
  // Afficher les premi√®res lignes
  console.log('\nüìÑ Premi√®res lignes de FriendsPage.js:');
  const lines = friendsContent.split('\n').slice(0, 10);
  lines.forEach((line, index) => {
    console.log(`   ${index + 1}: ${line.trim()}`);
  });
}

// 5. V√©rification du serveur principal
console.log('\nüîç 5. V√âRIFICATION DU SERVEUR PRINCIPAL:');
if (fs.existsSync('server/server.js')) {
  const serverContent = fs.readFileSync('server/server.js', 'utf8');
  
  console.log(`   Route friends incluse: ${serverContent.includes('friends') ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Configuration route friends: ${serverContent.includes('app.use(\'/api/friends\'') ? '‚úÖ' : '‚ùå'}`);
  
  // Chercher les lignes avec "friends"
  const friendLines = serverContent.split('\n').filter(line => line.includes('friends'));
  if (friendLines.length > 0) {
    console.log('\nüìÑ Lignes avec "friends" dans server.js:');
    friendLines.forEach(line => {
      console.log(`   ${line.trim()}`);
    });
  } else {
    console.log('   ‚ùå Aucune r√©f√©rence √† "friends" trouv√©e dans server.js');
  }
}

// 6. Test de compilation
console.log('\nüß™ 6. TEST DE COMPILATION:');
console.log('   üîÑ V√©rification de la syntaxe...');

if (fs.existsSync('client/src/App.js')) {
  const appContent = fs.readFileSync('client/src/App.js', 'utf8');
  
  const errors = [];
  
  // V√©rifier les imports en double
  const importMatches = appContent.match(/LazyFriendsPage/g);
  if (importMatches && importMatches.length > 1) {
    errors.push(`Import en double de LazyFriendsPage (${importMatches.length} fois)`);
  }
  
  // V√©rifier les accolades
  const openBraces = (appContent.match(/\{/g) || []).length;
  const closeBraces = (appContent.match(/\}/g) || []).length;
  if (openBraces !== closeBraces) {
    errors.push(`Accolades non √©quilibr√©es (${openBraces} ouvertes, ${closeBraces} ferm√©es)`);
  }
  
  // V√©rifier les parenth√®ses
  const openParens = (appContent.match(/\(/g) || []).length;
  const closeParens = (appContent.match(/\)/g) || []).length;
  if (openParens !== closeParens) {
    errors.push(`Parenth√®ses non √©quilibr√©es (${openParens} ouvertes, ${closeParens} ferm√©es)`);
  }
  
  if (errors.length === 0) {
    console.log('   ‚úÖ Aucune erreur de syntaxe d√©tect√©e');
  } else {
    console.log('   ‚ùå Erreurs de syntaxe d√©tect√©es:');
    errors.forEach(error => console.log(`      - ${error}`));
  }
}

// 7. Recommandations
console.log('\nüí° 7. RECOMMANDATIONS:');
console.log('   Si des ‚ùå sont pr√©sents:');
console.log('   1. Corrigez les erreurs de syntaxe');
console.log('   2. Ajoutez la route friends dans server.js si manquante');
console.log('   3. V√©rifiez que FriendsPage.js exporte correctement');
console.log('   4. Red√©marrez le serveur et le client');

console.log('\nüéØ DIAGNOSTIC TERMIN√â');
console.log('======================='); 