const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

// Token d'authentification (√† remplacer par un vrai token)
const AUTH_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7Il9pZCI6IjUwN2YxZjc3YmNmODZjZDc5OTQzOTAxMSIsImZpcnN0TmFtZSI6IkpvaG4iLCJsYXN0TmFtZSI6IkRvZSIsImVtYWlsIjoiam9obkBleGFtcGxlLmNvbSIsInJlZ2lvbiI6IkNvbmFrcnkiLCJwcmVmZWN0dXJlIjoiQ29uYWtyeSIsImNvbW11bmUiOiJLYWxvdW0iLCJxdWFydGllciI6IkNlbnRyZSIsImNvb3JkaW5hdGVzIjp7ImxhdGl0dWRlIjo5LjUzNzAsImxvbmdpdHVkZSI6LTEzLjY3ODV9fSwiaWF0IjoxNzMyNzQ5NjAwLCJleHAiOjE3MzI4MzYwMDB9.test';

// Configuration axios avec token d'authentification
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Authorization': `Bearer ${AUTH_TOKEN}`,
    'Content-Type': 'application/json'
  }
});

console.log('üé• Test de l\'API des Lives Communautaires CommuniConnect\n');

// Fonction pour cr√©er un live communautaire
async function createCommunityLive(liveData) {
  try {
    console.log(`üìπ Cr√©ation du live: ${liveData.title}`);
    const response = await api.post('/livestreams', liveData);
    console.log(`‚úÖ Live cr√©√© avec succ√®s: ${response.data.message}`);
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la cr√©ation du live: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

// Fonction pour r√©cup√©rer les lives de la communaut√©
async function getCommunityLives() {
  try {
    console.log('üìã R√©cup√©ration des lives communautaires...');
    const response = await api.get('/livestreams');
    console.log(`‚úÖ ${response.data.data.length} lives r√©cup√©r√©s`);
    
    console.log('üìã D√©tails des lives:');
    response.data.data.forEach((stream, index) => {
      console.log(`${index + 1}. ${stream.title} (${stream.type})`);
      console.log(`   Urgence: ${stream.urgency}`);
      console.log(`   Visibilit√©: ${stream.visibility}`);
      console.log(`   Auteur: ${stream.author.firstName} ${stream.author.lastName}`);
      console.log(`   Spectateurs: ${stream.stats.currentViewers}`);
      console.log('');
    });
    
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la r√©cup√©ration des lives: ${error.response?.data?.message || error.message}`);
    return [];
  }
}

// Fonction pour r√©cup√©rer les alertes
async function getAlerts() {
  try {
    console.log('üö® R√©cup√©ration des alertes en direct...');
    const response = await api.get('/livestreams/alerts');
    console.log(`‚úÖ ${response.data.data.length} alertes r√©cup√©r√©es`);
    
    console.log('üö® Alertes en cours:');
    response.data.data.forEach((alert, index) => {
      console.log(`${index + 1}. ${alert.title}`);
      console.log(`   Urgence: ${alert.urgency}`);
      console.log(`   Localisation: ${alert.location.quartier}, ${alert.location.commune}`);
      console.log(`   Spectateurs: ${alert.stats.currentViewers}`);
      console.log('');
    });
    
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la r√©cup√©ration des alertes: ${error.response?.data?.message || error.message}`);
    return [];
  }
}

// Fonction pour r√©cup√©rer les lives d'un quartier sp√©cifique
async function getCommunityStreams(quartier, commune) {
  try {
    console.log(`üèòÔ∏è R√©cup√©ration des lives du quartier ${quartier}...`);
    const response = await api.get(`/livestreams/community?quartier=${quartier}&commune=${commune}`);
    console.log(`‚úÖ ${response.data.data.length} lives du quartier r√©cup√©r√©s`);
    
    console.log(`üèòÔ∏è Lives du quartier ${quartier}:`);
    response.data.data.forEach((stream, index) => {
      console.log(`${index + 1}. ${stream.title} (${stream.type})`);
      console.log(`   Urgence: ${stream.urgency}`);
      console.log(`   Auteur: ${stream.author.firstName} ${stream.author.lastName}`);
      console.log('');
    });
    
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la r√©cup√©ration des lives du quartier: ${error.response?.data?.message || error.message}`);
    return [];
  }
}

// Fonction pour obtenir un live sp√©cifique
async function getLiveStream(id) {
  try {
    console.log(`üì∫ R√©cup√©ration du live ${id}...`);
    const response = await api.get(`/livestreams/${id}`);
    console.log(`‚úÖ Live r√©cup√©r√©: ${response.data.data.title}`);
    
    const stream = response.data.data;
    console.log(`üìä D√©tails du live:`);
    console.log(`   Titre: ${stream.title}`);
    console.log(`   Type: ${stream.type}`);
    console.log(`   Urgence: ${stream.urgency}`);
    console.log(`   Visibilit√©: ${stream.visibility}`);
    console.log(`   Localisation: ${stream.location.quartier}, ${stream.location.commune}`);
    console.log(`   Spectateurs actuels: ${stream.stats.currentViewers}`);
    console.log(`   Messages: ${stream.messages?.length || 0}`);
    console.log('');
    
    return stream;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la r√©cup√©ration du live: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

// Fonction pour d√©marrer un live
async function startLiveStream(id) {
  try {
    console.log(`‚ñ∂Ô∏è D√©marrage du live ${id}...`);
    const response = await api.post(`/livestreams/${id}/start`);
    console.log(`‚úÖ Live d√©marr√© avec succ√®s: ${response.data.message}`);
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors du d√©marrage du live: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

// Fonction pour rejoindre un live
async function joinLiveStream(id) {
  try {
    console.log(`üë• Rejoindre le live ${id}...`);
    const response = await api.post(`/livestreams/${id}/join`);
    console.log(`‚úÖ Rejoint le live avec succ√®s: ${response.data.message}`);
    return true;
  } catch (error) {
    console.log(`‚ùå Erreur lors de la connexion au live: ${error.response?.data?.message || error.message}`);
    return false;
  }
}

// Fonction pour envoyer un message
async function sendMessage(id, message) {
  try {
    console.log(`üí¨ Envoi du message: "${message}"`);
    const response = await api.post(`/livestreams/${id}/message`, { message });
    console.log(`‚úÖ Message envoy√© avec succ√®s: ${response.data.message}`);
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de l'envoi du message: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

// Fonction pour ajouter une r√©action
async function addReaction(id, reactionType) {
  try {
    console.log(`üëç Ajout de la r√©action: ${reactionType}`);
    const response = await api.post(`/livestreams/${id}/reaction`, { type: reactionType });
    console.log(`‚úÖ R√©action ajout√©e avec succ√®s: ${response.data.message}`);
    return response.data.data;
  } catch (error) {
    console.log(`‚ùå Erreur lors de l'ajout de la r√©action: ${error.response?.data?.message || error.message}`);
    return null;
  }
}

// Test principal
async function runTests() {
  const createdLives = [];

  // Test 1: Cr√©ation de lives communautaires
  console.log('=== Test 1: Cr√©ation de lives communautaires ===');
  
  // Alerte urgente
  const alertData = {
    type: 'alert',
    title: 'Incendie dans le quartier Centre',
    description: 'Incendie signal√© rue principale, pompiers en route',
    urgency: 'critical',
    visibility: 'quartier'
  };

  // R√©union de quartier
  const meetingData = {
    type: 'meeting',
    title: 'R√©union de quartier - Propret√©',
    description: 'R√©union mensuelle pour discuter de la propret√© du quartier',
    urgency: 'low',
    visibility: 'quartier'
  };

  // Session de sensibilisation
  const sensitizationData = {
    type: 'sensitization',
    title: 'Sensibilisation sur la propret√©',
    description: 'Session de sensibilisation sur la gestion des d√©chets',
    urgency: 'medium',
    visibility: 'commune'
  };

  const alertLive = await createCommunityLive(alertData);
  if (alertLive) createdLives.push(alertLive);

  const meetingLive = await createCommunityLive(meetingData);
  if (meetingLive) createdLives.push(meetingLive);

  const sensitizationLive = await createCommunityLive(sensitizationData);
  if (sensitizationLive) createdLives.push(sensitizationLive);

  console.log(`üìä ${createdLives.length} lives communautaires cr√©√©s avec succ√®s\n`);

  // Test 2: R√©cup√©ration des lives communautaires
  console.log('=== Test 2: R√©cup√©ration des lives communautaires ===');
  await getCommunityLives();

  // Test 3: R√©cup√©ration des alertes
  console.log('=== Test 3: R√©cup√©ration des alertes ===');
  await getAlerts();

  // Test 4: R√©cup√©ration des lives d'un quartier sp√©cifique
  console.log('=== Test 4: R√©cup√©ration des lives du quartier Centre ===');
  await getCommunityStreams('Centre', 'Kaloum');

  // Test 5: Obtenir un live sp√©cifique
  if (createdLives.length > 0) {
    console.log('=== Test 5: R√©cup√©ration d\'un live sp√©cifique ===');
    const firstLive = createdLives[0];
    await getLiveStream(firstLive._id);
  }

  // Test 6: D√©marrer un live
  if (createdLives.length > 0) {
    console.log('=== Test 6: D√©marrage d\'un live ===');
    const firstLive = createdLives[0];
    await startLiveStream(firstLive._id);
  }

  // Test 7: Rejoindre un live
  if (createdLives.length > 0) {
    console.log('=== Test 7: Rejoindre un live ===');
    const firstLive = createdLives[0];
    await joinLiveStream(firstLive._id);
  }

  // Test 8: Envoyer des messages
  if (createdLives.length > 0) {
    console.log('=== Test 8: Envoi de messages ===');
    const firstLive = createdLives[0];
    await sendMessage(firstLive._id, 'Merci pour l\'information !');
    await sendMessage(firstLive._id, 'Les pompiers arrivent bient√¥t');
  }

  // Test 9: Ajouter des r√©actions
  if (createdLives.length > 0) {
    console.log('=== Test 9: Ajout de r√©actions ===');
    const firstLive = createdLives[0];
    await addReaction(firstLive._id, 'like');
    await addReaction(firstLive._id, 'alert');
  }

  console.log('‚úÖ Tests termin√©s avec succ√®s!');
}

// Ex√©cuter les tests
runTests().catch(console.error); 