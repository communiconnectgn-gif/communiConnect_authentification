const puppeteer = require('puppeteer');

async function testActionsRapides() {
  console.log('üß™ Test des actions rapides...');
  
  const browser = await puppeteer.launch({ 
    headless: false,
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // Test 1: Actions rapides sur la page d'accueil
    console.log('üì± Test des actions rapides sur la page d\'accueil...');
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(2000);
    
    // V√©rifier que les boutons d'actions rapides sont pr√©sents
    const actionsRapides = await page.$$('button');
    let actionsRapidesTrouvees = 0;
    
    for (const button of actionsRapides) {
      const text = await button.evaluate(el => el.textContent);
      if (text && (text.includes('Cr√©er une alerte') || text.includes('Cr√©er un √©v√©nement') || text.includes('Demander de l\'aide') || text.includes('Voir la carte'))) {
        actionsRapidesTrouvees++;
        console.log(`‚úÖ Bouton trouv√©: ${text}`);
      }
    }
    
    console.log(`üìä Actions rapides trouv√©es: ${actionsRapidesTrouvees}/4`);
    
    // Test 2: Navigation vers la page d'alertes
    console.log('üö® Test de navigation vers les alertes...');
    const boutonAlerte = await page.$('button:has-text("Cr√©er une alerte")');
    if (boutonAlerte) {
      await boutonAlerte.click();
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      if (currentUrl.includes('/alerts')) {
        console.log('‚úÖ Navigation vers les alertes r√©ussie');
        
        // V√©rifier la pr√©sence du bouton FAB
        const fab = await page.$('button[aria-label*="Cr√©er"]');
        if (fab) {
          console.log('‚úÖ Bouton FAB de cr√©ation d\'alerte trouv√©');
        } else {
          console.log('‚ùå Bouton FAB de cr√©ation d\'alerte non trouv√©');
        }
      } else {
        console.log('‚ùå Navigation vers les alertes √©chou√©e');
      }
    }
    
    // Test 3: Navigation vers la page d'√©v√©nements
    console.log('üìÖ Test de navigation vers les √©v√©nements...');
    await page.goto('http://localhost:3000');
    await page.waitForTimeout(1000);
    
    const boutonEvenement = await page.$('button:has-text("Cr√©er un √©v√©nement")');
    if (boutonEvenement) {
      await boutonEvenement.click();
      await page.waitForTimeout(2000);
      
      const currentUrl = page.url();
      if (currentUrl.includes('/events')) {
        console.log('‚úÖ Navigation vers les √©v√©nements r√©ussie');
        
        // V√©rifier la pr√©sence du bouton FAB
        const fab = await page.$('button[aria-label*="Cr√©er"]');
        if (fab) {
          console.log('‚úÖ Bouton FAB de cr√©ation d\'√©v√©nement trouv√©');
        } else {
          console.log('‚ùå Bouton FAB de cr√©ation d\'√©v√©nement non trouv√©');
        }
      } else {
        console.log('‚ùå Navigation vers les √©v√©nements √©chou√©e');
      }
    }
    
    // Test 4: Actions rapides sur la carte
    console.log('üó∫Ô∏è Test des actions rapides sur la carte...');
    await page.goto('http://localhost:3000/map');
    await page.waitForTimeout(2000);
    
    // V√©rifier la pr√©sence du SpeedDial
    const speedDial = await page.$('[aria-label="Actions rapides"]');
    if (speedDial) {
      console.log('‚úÖ SpeedDial des actions rapides trouv√©');
      
      // Cliquer sur le SpeedDial pour ouvrir les actions
      await speedDial.click();
      await page.waitForTimeout(1000);
      
      // V√©rifier les actions disponibles
      const actions = await page.$$('[role="menuitem"]');
      console.log(`üìä Actions rapides sur la carte: ${actions.length} trouv√©es`);
      
      for (let i = 0; i < actions.length; i++) {
        const action = actions[i];
        const tooltip = await action.getAttribute('aria-label');
        console.log(`  - ${tooltip}`);
      }
    } else {
      console.log('‚ùå SpeedDial des actions rapides non trouv√©');
    }
    
    console.log('\nüéâ Test des actions rapides termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await browser.close();
  }
}

// Lancer le test
testActionsRapides().catch(console.error); 